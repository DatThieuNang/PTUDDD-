import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../domain/entities/entities.dart';

class MemoryDataSource {
  static const _cartKey = 'cart_items';
  static const _wishlistKey = 'wishlist_ids';
  static const _ordersKey = 'orders';

  // Catalog mock (ảnh URL, dễ chạy & đẹp ngay)
  final List<Book> catalog = const [
    Book(id:'b1', title:'Bóng đá cơ bản', author:'Nguyễn A', price:85000,
      image:'https://images.unsplash.com/photo-1517927033932-b3d18e61fb3a', category:'Football'),
    Book(id:'b2', title:'Yoga cho người mới', author:'Trần B', price:99000,
      image:'https://images.unsplash.com/photo-1552196563-55cd4e45efb3', category:'Fitness'),
    Book(id:'b3', title:'Chiến thuật bóng rổ', author:'Lê C', price:120000,
      image:'https://images.unsplash.com/photo-1517649763962-0c623066013b', category:'Basketball'),
    Book(id:'b4', title:'Dinh dưỡng thể thao', author:'Phạm D', price:110000,
      image:'https://images.unsplash.com/photo-1490645935967-10de6ba17061', category:'Fitness'),
    Book(id:'b5', title:'Kỹ thuật sút phạt', author:'Võ E', price:89000,
      image:'https://images.unsplash.com/photo-1461896836934-ffe607ba8211', category:'Football'),
    Book(id:'b6', title:'Phục hồi chấn thương', author:'Đỗ F', price:135000,
      image:'https://images.unsplash.com/photo-1518310383802-640c2de311b2', category:'Fitness'),
    Book(id:'b7', title:'Bóng rổ nâng cao', author:'Bùi G', price:145000,
      image:'https://images.unsplash.com/photo-1504457047772-27f3f414552d', category:'Basketball'),
    Book(id:'b8', title:'Thể lực cho cầu thủ', author:'Hồ H', price:125000,
      image:'https://images.unsplash.com/photo-1476480862126-209bfaa8edc8', category:'Football'),
  ];

  // Image helper: asset hoặc url đều dùng được, có fallback icon
  static Widget safeImage(String path, {double? width, double? height, BoxFit fit = BoxFit.cover}) {
    final isUrl = path.startsWith('http');
    final img = isUrl
        ? Image.network(path, width: width, height: height, fit: fit)
        : Image.asset(path,   width: width, height: height, fit: fit);
    return Image(
      image: (img.image),
      width: width,
      height: height,
      fit: fit,
      errorBuilder: (_, __, ___) => Container(
        width: width, height: height,
        alignment: Alignment.center,
        decoration: BoxDecoration(
          color: const Color(0xFFEFF3F6),
          borderRadius: BorderRadius.circular(12),
        ),
        child: const Icon(Icons.menu_book_outlined, size: 28, color: Color(0xFF90A4AE)),
      ),
    );
  }

  Future<List<CartItem>> loadCart() async {
    final sp = await SharedPreferences.getInstance();
    final raw = sp.getString(_cartKey);
    if (raw == null) return [];
    final list = (jsonDecode(raw) as List).cast<Map<String, dynamic>>();
    return list.map((e) => CartItem.fromJson(e)).toList();
  }

  Future<void> saveCart(List<CartItem> items) async {
    final sp = await SharedPreferences.getInstance();
    await sp.setString(_cartKey, jsonEncode(items.map((e) => e.toJson()).toList()));
  }

  Future<List<String>> loadWishlistIds() async {
    final sp = await SharedPreferences.getInstance();
    return sp.getStringList(_wishlistKey) ?? <String>[];
  }

  Future<void> saveWishlistIds(List<String> ids) async {
    final sp = await SharedPreferences.getInstance();
    await sp.setStringList(_wishlistKey, ids);
  }

  Future<List<Order>> loadOrders() async {
    final sp = await SharedPreferences.getInstance();
    final raw = sp.getString(_ordersKey);
    if (raw == null) return [];
    final list = (jsonDecode(raw) as List).cast<Map<String, dynamic>>();
    return list.map((m) => Order(
      id: m['id'],
      total: m['total'],
      createdAt: DateTime.parse(m['createdAt']),
      items: (m['items'] as List).map((e) => CartItem.fromJson(e)).toList(),
    )).toList();
  }

  Future<void> saveOrders(List<Order> orders) async {
    final sp = await SharedPreferences.getInstance();
    final raw = orders.map((o) => {
      'id': o.id,
      'total': o.total,
      'createdAt': o.createdAt.toIso8601String(),
      'items': o.items.map((e) => e.toJson()).toList(),
    }).toList();
    await sp.setString(_ordersKey, jsonEncode(raw));
  }
}
