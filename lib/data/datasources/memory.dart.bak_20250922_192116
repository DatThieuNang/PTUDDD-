import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import '../../domain/entities/entities.dart';
import 'package:flutter/material.dart';

class MemoryDataSource {
  static const _cartKey = 'cart_items';
  static const _wishlistKey = 'wishlist_ids';
  static const _ordersKey = 'orders';

  // Catalog mock (8 sản phẩm)
  final List<Book> catalog = const [
    Book(id:'b1', title:'Bóng đá cơ bản', author:'Nguyễn A', price:85000,  image:'assets/images/book1.png', category:'Football'),
    Book(id:'b2', title:'Yoga cho người mới', author:'Trần B', price:99000,  image:'assets/images/book2.png', category:'Fitness'),
    Book(id:'b3', title:'Chiến thuật bóng rổ', author:'Lê C', price:120000, image:'assets/images/book3.png', category:'Basketball'),
    Book(id:'b4', title:'Dinh dưỡng thể thao', author:'Phạm D', price:110000, image:'assets/images/book4.png', category:'Fitness'),
    Book(id:'b5', title:'Kỹ thuật sút phạt', author:'Võ E', price:89000,  image:'assets/images/book5.png', category:'Football'),
    Book(id:'b6', title:'Phục hồi chấn thương', author:'Đỗ F', price:135000, image:'assets/images/book6.png', category:'Fitness'),
    Book(id:'b7', title:'Bóng rổ nâng cao', author:'Bùi G', price:145000, image:'assets/images/book7.png', category:'Basketball'),
    Book(id:'b8', title:'Thể lực cho cầu thủ', author:'Hồ H', price:125000, image:'assets/images/book8.png', category:'Football'),
  ];

  // Helper: fallback khi ảnh lỗi (không bắt buộc, dùng ở UI)
  static Widget safeImage(String path, {double? w, double? h, BoxFit fit = BoxFit.contain}) {
    return Image.asset(
      path, width: w, height: h, fit: fit,
      errorBuilder: (_, __, ___) => Container(
        width: w, height: h,
        alignment: Alignment.center,
        color: const Color(0xFFEFF3F6),
        child: const Icon(Icons.menu_book_outlined, size: 28, color: Color(0xFF90A4AE)),
      ),
    );
  }

  Future<List<CartItem>> loadCart() async {
    final sp = await SharedPreferences.getInstance();
    final raw = sp.getString(_cartKey);
    if (raw == null) return [];
    final list = (jsonDecode(raw) as List).cast<Map<String, dynamic>>();
    return list.map((e) => CartItem.fromJson(e)).toList();
  }

  Future<void> saveCart(List<CartItem> items) async {
    final sp = await SharedPreferences.getInstance();
    await sp.setString(_cartKey, jsonEncode(items.map((e) => e.toJson()).toList()));
  }

  Future<List<String>> loadWishlistIds() async {
    final sp = await SharedPreferences.getInstance();
    return sp.getStringList(_wishlistKey) ?? <String>[];
  }

  Future<void> saveWishlistIds(List<String> ids) async {
    final sp = await SharedPreferences.getInstance();
    await sp.setStringList(_wishlistKey, ids);
  }

  Future<List<Order>> loadOrders() async {
    final sp = await SharedPreferences.getInstance();
    final raw = sp.getString(_ordersKey);
    if (raw == null) return [];
    final list = (jsonDecode(raw) as List).cast<Map<String, dynamic>>();
    return list.map((m) => Order(
      id: m['id'],
      total: m['total'],
      createdAt: DateTime.parse(m['createdAt']),
      items: (m['items'] as List).map((e) => CartItem.fromJson(e)).toList(),
    )).toList();
  }

  Future<void> saveOrders(List<Order> orders) async {
    final sp = await SharedPreferences.getInstance();
    final raw = orders.map((o) => {
      'id': o.id,
      'total': o.total,
      'createdAt': o.createdAt.toIso8601String(),
      'items': o.items.map((e) => e.toJson()).toList(),
    }).toList();
    await sp.setString(_ordersKey, jsonEncode(raw));
  }
}

